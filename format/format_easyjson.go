// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package format

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat(in *jlexer.Lexer, out *Utxos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Utxos, 0, 1)
			} else {
				*out = Utxos{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Utxo
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat(out *jwriter.Writer, in Utxos) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Utxos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Utxos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Utxos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Utxos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat1(in *jlexer.Lexer, out *UtxoVout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptpubkey":
			out.Scriptpubkey = string(in.String())
		case "scriptpubkey_asm":
			out.ScriptpubkeyAsm = string(in.String())
		case "scriptpubkey_address":
			out.ScriptpubkeyAddress = string(in.String())
		case "scriptpubkey_type":
			out.ScriptpubkeyType = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "Index":
			out.Index = int(in.Int())
		case "Address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat1(out *jwriter.Writer, in UtxoVout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"scriptpubkey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scriptpubkey))
	}
	{
		const prefix string = ",\"scriptpubkey_asm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptpubkeyAsm))
	}
	{
		const prefix string = ",\"scriptpubkey_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptpubkeyAddress))
	}
	{
		const prefix string = ",\"scriptpubkey_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptpubkeyType))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"Index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Index))
	}
	{
		const prefix string = ",\"Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UtxoVout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UtxoVout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UtxoVout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UtxoVout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat1(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat2(in *jlexer.Lexer, out *Utxo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txid":
			out.Txid = string(in.String())
		case "vout":
			out.Vout = int(in.Int())
		case "status":
			easyjson72863a49Decode(in, &out.Status)
		case "value":
			out.Value = float64(in.Float64())
		case "Address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat2(out *jwriter.Writer, in Utxo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	{
		const prefix string = ",\"vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Vout))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson72863a49Encode(out, in.Status)
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Utxo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Utxo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Utxo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Utxo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat2(l, v)
}
func easyjson72863a49Decode(in *jlexer.Lexer, out *struct {
	Confirmed   bool    `json:"confirmed"`
	BlockHeight float64 `json:"block_height"`
	BlockHash   string  `json:"block_hash"`
	BlockTime   float64 `json:"block_time"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "confirmed":
			out.Confirmed = bool(in.Bool())
		case "block_height":
			out.BlockHeight = float64(in.Float64())
		case "block_hash":
			out.BlockHash = string(in.String())
		case "block_time":
			out.BlockTime = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49Encode(out *jwriter.Writer, in struct {
	Confirmed   bool    `json:"confirmed"`
	BlockHeight float64 `json:"block_height"`
	BlockHash   string  `json:"block_hash"`
	BlockTime   float64 `json:"block_time"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"confirmed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Confirmed))
	}
	{
		const prefix string = ",\"block_height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BlockHeight))
	}
	{
		const prefix string = ",\"block_hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlockHash))
	}
	{
		const prefix string = ",\"block_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BlockTime))
	}
	out.RawByte('}')
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat3(in *jlexer.Lexer, out *Txs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Txs, 0, 1)
			} else {
				*out = Txs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Tx
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat3(out *jwriter.Writer, in Txs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Txs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Txs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Txs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Txs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat3(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat4(in *jlexer.Lexer, out *TxReturn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Txs":
			if in.IsNull() {
				in.Skip()
				out.Txs = nil
			} else {
				in.Delim('[')
				if out.Txs == nil {
					if !in.IsDelim(']') {
						out.Txs = make([][]Tx, 0, 2)
					} else {
						out.Txs = [][]Tx{}
					}
				} else {
					out.Txs = (out.Txs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 []Tx
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						in.Delim('[')
						if v7 == nil {
							if !in.IsDelim(']') {
								v7 = make([]Tx, 0, 1)
							} else {
								v7 = []Tx{}
							}
						} else {
							v7 = (v7)[:0]
						}
						for !in.IsDelim(']') {
							var v8 Tx
							(v8).UnmarshalEasyJSON(in)
							v7 = append(v7, v8)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Txs = append(out.Txs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat4(out *jwriter.Writer, in TxReturn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Txs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Txs {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v11, v12 := range v10 {
						if v11 > 0 {
							out.RawByte(',')
						}
						(v12).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxReturn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxReturn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxReturn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxReturn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat4(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat5(in *jlexer.Lexer, out *Tx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txid":
			out.Txid = string(in.String())
		case "version":
			out.Version = float64(in.Float64())
		case "locktime":
			out.Locktime = float64(in.Float64())
		case "vin":
			if in.IsNull() {
				in.Skip()
				out.Vin = nil
			} else {
				in.Delim('[')
				if out.Vin == nil {
					if !in.IsDelim(']') {
						out.Vin = make([]struct {
							Txid    string  `json:"txid"`
							Vout    float64 `json:"vout"`
							PrevOut struct {
								Scriptpubkey        string  `json:"scriptpubkey"`
								ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
								ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
								ScriptpubkeyType    string  `json:"scriptpubkey_type"`
								Value               float64 `json:"value"`
							} `json:"prevout"`
							Scriptsig    string   `json:"scriptsig"`
							ScriptsigAsm string   `json:"scriptsig_asm"`
							Witness      []string `json:"witness"`
							IsCoinbase   bool     `json:"is_coinbase"`
							Sequence     float64  `json:"sequence"`
						}, 0, 1)
					} else {
						out.Vin = []struct {
							Txid    string  `json:"txid"`
							Vout    float64 `json:"vout"`
							PrevOut struct {
								Scriptpubkey        string  `json:"scriptpubkey"`
								ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
								ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
								ScriptpubkeyType    string  `json:"scriptpubkey_type"`
								Value               float64 `json:"value"`
							} `json:"prevout"`
							Scriptsig    string   `json:"scriptsig"`
							ScriptsigAsm string   `json:"scriptsig_asm"`
							Witness      []string `json:"witness"`
							IsCoinbase   bool     `json:"is_coinbase"`
							Sequence     float64  `json:"sequence"`
						}{}
					}
				} else {
					out.Vin = (out.Vin)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						Txid    string  `json:"txid"`
						Vout    float64 `json:"vout"`
						PrevOut struct {
							Scriptpubkey        string  `json:"scriptpubkey"`
							ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
							ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
							ScriptpubkeyType    string  `json:"scriptpubkey_type"`
							Value               float64 `json:"value"`
						} `json:"prevout"`
						Scriptsig    string   `json:"scriptsig"`
						ScriptsigAsm string   `json:"scriptsig_asm"`
						Witness      []string `json:"witness"`
						IsCoinbase   bool     `json:"is_coinbase"`
						Sequence     float64  `json:"sequence"`
					}
					easyjson72863a49Decode1(in, &v13)
					out.Vin = append(out.Vin, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Vout":
			if in.IsNull() {
				in.Skip()
				out.Vout = nil
			} else {
				in.Delim('[')
				if out.Vout == nil {
					if !in.IsDelim(']') {
						out.Vout = make([]struct {
							Scriptpubkey        string  `json:"scriptpubkey"`
							ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
							ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
							ScriptpubkeyType    string  `json:"scriptpubkey_type"`
							Value               float64 `json:"value"`
						}, 0, 1)
					} else {
						out.Vout = []struct {
							Scriptpubkey        string  `json:"scriptpubkey"`
							ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
							ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
							ScriptpubkeyType    string  `json:"scriptpubkey_type"`
							Value               float64 `json:"value"`
						}{}
					}
				} else {
					out.Vout = (out.Vout)[:0]
				}
				for !in.IsDelim(']') {
					var v14 struct {
						Scriptpubkey        string  `json:"scriptpubkey"`
						ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
						ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
						ScriptpubkeyType    string  `json:"scriptpubkey_type"`
						Value               float64 `json:"value"`
					}
					easyjson72863a49Decode2(in, &v14)
					out.Vout = append(out.Vout, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "size":
			out.Size = float64(in.Float64())
		case "weight":
			out.Weight = float64(in.Float64())
		case "fee":
			out.Fee = float64(in.Float64())
		case "Status":
			easyjson72863a49Decode(in, &out.Status)
		case "NumberofConfirmations":
			out.NumberofConfirmations = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat5(out *jwriter.Writer, in Tx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Version))
	}
	{
		const prefix string = ",\"locktime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Locktime))
	}
	{
		const prefix string = ",\"vin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Vin == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Vin {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson72863a49Encode1(out, v16)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Vout == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Vout {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson72863a49Encode2(out, v18)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Weight))
	}
	{
		const prefix string = ",\"fee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fee))
	}
	{
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson72863a49Encode(out, in.Status)
	}
	{
		const prefix string = ",\"NumberofConfirmations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.NumberofConfirmations))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat5(l, v)
}
func easyjson72863a49Decode2(in *jlexer.Lexer, out *struct {
	Scriptpubkey        string  `json:"scriptpubkey"`
	ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
	ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
	ScriptpubkeyType    string  `json:"scriptpubkey_type"`
	Value               float64 `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptpubkey":
			out.Scriptpubkey = string(in.String())
		case "scriptpubkey_asm":
			out.ScriptpubkeyAsm = string(in.String())
		case "scriptpubkey_address":
			out.ScriptpubkeyAddress = string(in.String())
		case "scriptpubkey_type":
			out.ScriptpubkeyType = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49Encode2(out *jwriter.Writer, in struct {
	Scriptpubkey        string  `json:"scriptpubkey"`
	ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
	ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
	ScriptpubkeyType    string  `json:"scriptpubkey_type"`
	Value               float64 `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"scriptpubkey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scriptpubkey))
	}
	{
		const prefix string = ",\"scriptpubkey_asm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptpubkeyAsm))
	}
	{
		const prefix string = ",\"scriptpubkey_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptpubkeyAddress))
	}
	{
		const prefix string = ",\"scriptpubkey_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptpubkeyType))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
func easyjson72863a49Decode1(in *jlexer.Lexer, out *struct {
	Txid    string  `json:"txid"`
	Vout    float64 `json:"vout"`
	PrevOut struct {
		Scriptpubkey        string  `json:"scriptpubkey"`
		ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
		ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
		ScriptpubkeyType    string  `json:"scriptpubkey_type"`
		Value               float64 `json:"value"`
	} `json:"prevout"`
	Scriptsig    string   `json:"scriptsig"`
	ScriptsigAsm string   `json:"scriptsig_asm"`
	Witness      []string `json:"witness"`
	IsCoinbase   bool     `json:"is_coinbase"`
	Sequence     float64  `json:"sequence"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txid":
			out.Txid = string(in.String())
		case "vout":
			out.Vout = float64(in.Float64())
		case "prevout":
			easyjson72863a49Decode2(in, &out.PrevOut)
		case "scriptsig":
			out.Scriptsig = string(in.String())
		case "scriptsig_asm":
			out.ScriptsigAsm = string(in.String())
		case "witness":
			if in.IsNull() {
				in.Skip()
				out.Witness = nil
			} else {
				in.Delim('[')
				if out.Witness == nil {
					if !in.IsDelim(']') {
						out.Witness = make([]string, 0, 4)
					} else {
						out.Witness = []string{}
					}
				} else {
					out.Witness = (out.Witness)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Witness = append(out.Witness, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_coinbase":
			out.IsCoinbase = bool(in.Bool())
		case "sequence":
			out.Sequence = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49Encode1(out *jwriter.Writer, in struct {
	Txid    string  `json:"txid"`
	Vout    float64 `json:"vout"`
	PrevOut struct {
		Scriptpubkey        string  `json:"scriptpubkey"`
		ScriptpubkeyAsm     string  `json:"scriptpubkey_asm"`
		ScriptpubkeyAddress string  `json:"scriptpubkey_address"`
		ScriptpubkeyType    string  `json:"scriptpubkey_type"`
		Value               float64 `json:"value"`
	} `json:"prevout"`
	Scriptsig    string   `json:"scriptsig"`
	ScriptsigAsm string   `json:"scriptsig_asm"`
	Witness      []string `json:"witness"`
	IsCoinbase   bool     `json:"is_coinbase"`
	Sequence     float64  `json:"sequence"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Txid))
	}
	{
		const prefix string = ",\"vout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Vout))
	}
	{
		const prefix string = ",\"prevout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson72863a49Encode2(out, in.PrevOut)
	}
	{
		const prefix string = ",\"scriptsig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scriptsig))
	}
	{
		const prefix string = ",\"scriptsig_asm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScriptsigAsm))
	}
	{
		const prefix string = ",\"witness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Witness == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Witness {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_coinbase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsCoinbase))
	}
	{
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Sequence))
	}
	out.RawByte('}')
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat6(in *jlexer.Lexer, out *RequestFormat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Addresses = append(out.Addresses, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat6(out *jwriter.Writer, in RequestFormat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Addresses {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestFormat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestFormat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestFormat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestFormat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat6(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat7(in *jlexer.Lexer, out *MultigetAddrReturn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TotalTransactions":
			out.TotalTransactions = float64(in.Float64())
		case "ConfirmedTransactions":
			out.ConfirmedTransactions = float64(in.Float64())
		case "UnconfirmedTransactions":
			out.UnconfirmedTransactions = float64(in.Float64())
		case "Transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]Tx, 0, 1)
					} else {
						out.Transactions = []Tx{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Tx
					(v25).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat7(out *jwriter.Writer, in MultigetAddrReturn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TotalTransactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalTransactions))
	}
	{
		const prefix string = ",\"ConfirmedTransactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ConfirmedTransactions))
	}
	{
		const prefix string = ",\"UnconfirmedTransactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.UnconfirmedTransactions))
	}
	{
		const prefix string = ",\"Transactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Transactions {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultigetAddrReturn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultigetAddrReturn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultigetAddrReturn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultigetAddrReturn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat7(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat8(in *jlexer.Lexer, out *FeeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "2":
			out.Two = float64(in.Float64())
		case "3":
			out.Three = float64(in.Float64())
		case "4":
			out.Four = float64(in.Float64())
		case "5":
			out.Five = float64(in.Float64())
		case "6":
			out.Six = float64(in.Float64())
		case "10":
			out.Ten = float64(in.Float64())
		case "20":
			out.Twenty = float64(in.Float64())
		case "25":
			out.TwentyFive = float64(in.Float64())
		case "144":
			out.OneFourFour = float64(in.Float64())
		case "504":
			out.FiveZeroFour = float64(in.Float64())
		case "1008":
			out.OneThousandEight = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat8(out *jwriter.Writer, in FeeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Two))
	}
	{
		const prefix string = ",\"3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Three))
	}
	{
		const prefix string = ",\"4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Four))
	}
	{
		const prefix string = ",\"5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Five))
	}
	{
		const prefix string = ",\"6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Six))
	}
	{
		const prefix string = ",\"10\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Ten))
	}
	{
		const prefix string = ",\"20\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Twenty))
	}
	{
		const prefix string = ",\"25\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TwentyFive))
	}
	{
		const prefix string = ",\"144\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.OneFourFour))
	}
	{
		const prefix string = ",\"504\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FiveZeroFour))
	}
	{
		const prefix string = ",\"1008\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.OneThousandEight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat8(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat9(in *jlexer.Lexer, out *BalanceReturn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance":
			out.Balance = float64(in.Float64())
		case "UnconfirmedBalance":
			out.UnconfirmedBalance = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat9(out *jwriter.Writer, in BalanceReturn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Balance))
	}
	{
		const prefix string = ",\"UnconfirmedBalance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.UnconfirmedBalance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceReturn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceReturn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceReturn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceReturn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat9(l, v)
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat10(in *jlexer.Lexer, out *Balance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "chain_stats":
			easyjson72863a49Decode3(in, &out.ChainStats)
		case "mempool_stats":
			easyjson72863a49Decode3(in, &out.MempoolStats)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat10(out *jwriter.Writer, in Balance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"chain_stats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson72863a49Encode3(out, in.ChainStats)
	}
	{
		const prefix string = ",\"mempool_stats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson72863a49Encode3(out, in.MempoolStats)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Balance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Balance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Balance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Balance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat10(l, v)
}
func easyjson72863a49Decode3(in *jlexer.Lexer, out *struct {
	FundedTxoCount float64 `json:"funded_txo_count"`
	FundedTxoSum   float64 `json:"funded_txo_sum"`
	SpentTxoCount  float64 `json:"spent_txo_count"`
	SpentTxoSum    float64 `json:"spent_txo_sum"`
	TxCount        float64 `json:"tx_count"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "funded_txo_count":
			out.FundedTxoCount = float64(in.Float64())
		case "funded_txo_sum":
			out.FundedTxoSum = float64(in.Float64())
		case "spent_txo_count":
			out.SpentTxoCount = float64(in.Float64())
		case "spent_txo_sum":
			out.SpentTxoSum = float64(in.Float64())
		case "tx_count":
			out.TxCount = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49Encode3(out *jwriter.Writer, in struct {
	FundedTxoCount float64 `json:"funded_txo_count"`
	FundedTxoSum   float64 `json:"funded_txo_sum"`
	SpentTxoCount  float64 `json:"spent_txo_count"`
	SpentTxoSum    float64 `json:"spent_txo_sum"`
	TxCount        float64 `json:"tx_count"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"funded_txo_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FundedTxoCount))
	}
	{
		const prefix string = ",\"funded_txo_sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FundedTxoSum))
	}
	{
		const prefix string = ",\"spent_txo_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SpentTxoCount))
	}
	{
		const prefix string = ",\"spent_txo_sum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SpentTxoSum))
	}
	{
		const prefix string = ",\"tx_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TxCount))
	}
	out.RawByte('}')
}
func easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat11(in *jlexer.Lexer, out *BalTxReturn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance":
			(out.Balance).UnmarshalEasyJSON(in)
		case "Txs":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]MultigetAddrReturn, 0, 1)
					} else {
						out.Transactions = []MultigetAddrReturn{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v28 MultigetAddrReturn
					(v28).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat11(out *jwriter.Writer, in BalTxReturn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Balance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Balance).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Txs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Transactions {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalTxReturn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalTxReturn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComBithyveBithyveWrapperFormat11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalTxReturn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalTxReturn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComBithyveBithyveWrapperFormat11(l, v)
}
